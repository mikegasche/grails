/* *   Copyright 2008-2011 G-Stream Technologies GmbH * *   Licensed under the Apache License, Version 2.0 (the "License"); *   you may not use this file except in compliance with the License. *   You may obtain a copy of the License at * *       http://www.apache.org/licenses/LICENSE-2.0 * *   Unless required by applicable law or agreed to in writing, software *   distributed under the License is distributed on an "AS IS" BASIS, *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *   See the License for the specific language governing permissions and *   limitations under the License. */package ch.gstream.grails.plugins.dbunitoperatorimport org.apache.commons.logging.LogFactory/** * dbunit-operator test case. * Sublasss this test and place into 'test/integration' directory. * * @author Michael Gasche */
abstract class DbUnitTestCase extends GroovyTestCase {
	def log = LogFactory.getLog(getClass())
	def operator
	/**	 * Set up; setup database using all datasets.	 */    protected void setUp() {

    	operator = new DbUnitOperatorImpl(new Configuration(), null) //new MockApplicationContext())    	def sets = this.getDatasets()    	if (sets.size() > 1) {    		def first = sets.remove(0)			log.debug "Operating dataset '$first' within database..."    		operator.operate dbUnitOperationType, first    		operate ("INSERT", sets)    	} else {    		operate (dbUnitOperationType, sets)    	}    }	/**	 * Tear down; cleanup database for every dataset.	 */
    protected void tearDown() {    	this.getDatasets().each { filePath ->    		log.debug "Cleaning-up dataset '$filePath' within database"    		operator.operate dbUnitCleanupOperationType, filePath    	}    }
	private void operate(type, list) {		list.each { filePath ->			log.debug "Operating dataset '$filePath' within database..."			operator.operate type, filePath		}	}    /**     * Get standard DBUnit initial operation.     *     * NOTE: This operation is used only, when 1 dataset is provided.     * When providing more than datasets predefined operations will     * be executed to prevent cleaning of database, before all datasets     * have been persisted to database.     */    protected getDbUnitOperationType() {    	"CLEAN_INSERT"    }    /**     * Get standard DBUnit cleanup operation.     */    protected getDbUnitCleanupOperationType() {    	"DELETE_ALL"    }    /**     * Get datasets to process tests on.     *	 * NOTE: The root path for dataset files used for tests is the	 * grails project root path '[Grails-Project]'/.     */    protected abstract getDatasets()
}